{
  "version": 3,
  "sources": ["../../../../../apps/expresso/expresso/public/js/prediction.js"],
  "sourcesContent": ["frappe.provide(\"expresso.predict\");\n\nclass FieldPredictor {\n    constructor(frm) {\n        console.log('FieldPredictor initialized 1')\n        this.frm = frm;\n        this.state = 'idle';\n        this.fieldQueue = [];\n        this.currentField = null;\n        this.panel = null;\n        this.badge = null;\n    }\n\n    async init() {\n        // if (!this.isEnabled()) return;\n        \n        this.loadConfig();\n        console.log('FieldPredictor initialized 2', this.isEnabled())\n        this.setupFieldListeners();\n        await this.startPredictionFlow();\n    }\n\n    isEnabled() {\n        // return frappe.model.get_doc('Settings', 'Settings')\n        //     .enabled_doctypes.includes(this.frm.doctype);\n    }\n\n    loadConfig() {\n        console.log(3)\n        const config = frappe.model.get_doc('AI Model', 'deepseek');\n        console.log(3.4, this.frm.doctype)\n        this.fieldQueue =  ['customer', 'items', 'taxes_and_charges'];\n        //config.prediction_order[this.frm.doctype] ||\n        console.log(4)\n    }\n\n    setupFieldListeners() {\n        this.fieldQueue.forEach(field => {\n            const fieldObj = this.frm.fields_dict[field];\n            if (fieldObj) {\n                this.badge = new expresso.ui.SuggestionBadge(fieldObj);\n                this.panel = new expresso.ui.SuggestionPanel(fieldObj);\n                \n                fieldObj.df.onfocus = () => this.handleFieldFocus(field);\n                this.badge.onClick(() => this.showSuggestions(field));\n            }\n        });\n    }\n\n    async handleFieldFocus(field) {\n        this.currentField = field;\n        this.state = 'predicting';\n        this.showLoading();\n        \n        const suggestions = await this.getSuggestions(field);\n        this.showSuggestions(field, suggestions);\n        \n        this.state = 'idle';\n        this.hideLoading();\n    }\n\n    async getSuggestions(field) {\n        try {\n            const response = await frappe.call({\n                method: 'expresso.hooks.get_suggestions',\n                args: {\n                    doctype: this.frm.doctype,\n                    field: field,\n                    doc_data: JSON.stringify(this.frm.doc)\n                }\n            });\n            \n            return response.message.suggestions || [];\n        } catch (error) {\n            console.error('Prediction error:', error);\n            return [];\n        }\n    }\n\n    showLoading() {\n        this.badge.hide();\n        this.field.wrapper.classList.add('expresso-loading');\n    }\n\n    hideLoading() {\n        this.field.wrapper.classList.remove('expresso-loading');\n    }\n\n    showSuggestions(field, suggestions) {\n        if (suggestions.length > 0) {\n            this.badge.show();\n            this.panel.show(suggestions);\n        } else {\n            this.badge.hide();\n            this.panel.hide();\n        }\n    }\n}\n\n\n// (function() {\n//     if (window.frappe && frappe.ready) {\n//         frappe.ready(function() {\n//             if (frappe.get_route()[0] === 'Form') {\n//                 var doctype = frappe.get_route()[1];\n                \n//                 frappe.ui.form.on(doctype, {\n//                     onload_post_render: function(frm) {\n//                         new FieldPredictor(frm).init();\n//                     }\n//                 });\n//             }\n//         });\n//     } else {\n//         // Fallback if frappe.ready is not immediately available\n//         document.addEventListener('DOMContentLoaded', function() {\n//             if (window.frappe && frappe.get_route) {\n//                 if (frappe.get_route()[0] === 'Form') {\n//                     var doctype = frappe.get_route()[1];\n                    \n//                     frappe.ui.form.on(doctype, {\n//                         onload_post_render: function(frm) {\n//                             new FieldPredictor(frm).init();\n//                         }\n//                     });\n//                 }\n//             }\n//         });\n//     }\n// })();\n// import frappe\n// frappe.init_ready(function() {\n//     console.log(1112)\n//     if (frappe.get_route()[0] === 'Form') {\n//         console.log(1113)\n//         var doctype = frappe.get_route()[1];\n        \n//         frappe.ui.form.on(doctype, {\n//             onload_post_render: function(frm) {\n//                 console.log(1114)\n//                 new FieldPredictor(frm).init();\n//             }\n//         });\n//     }\n// });\n\n// jQuery(document).ready(function() {\n//     console.log(\"DOM fully loaded\");\n\n    // Your code here\n//     if (frappe.get_route()[0] === 'Form') {\n//         var doctype = frappe.get_route()[1];\n//         console.log(\"Current DocType:\", doctype);\n\n//         frappe.ui.form.on(doctype, {\n//             onload_post_render: function(frm) {\n//                 console.log(\"Form loaded and rendered\");\n//                 new FieldPredictor(frm).init();\n//             }\n//         });\n//     }\n// });\n\n// console.log('01')\n\njQuery(document).ready(function() {\n    // List of DocTypes to target\n    const doctypes = ['Sales Invoice', 'Purchase Invoice'];\n    let correctFormLoaded = false; // Flag to track if the correct form is loaded\n\n    // Iterate over each DocType\n    for (let i = 0; i < doctypes.length; i++) {\n        const doctype = doctypes[i];\n\n        // Attach event listeners to the current DocType\n        frappe.ui.form.on(doctype, {\n            refresh(frm) {\n                if (!correctFormLoaded) {\n                    correctFormLoaded = true; // Set the flag to true\n                }\n\n                console.log(`Form refreshed for ${doctype}`);\n                // Add your refresh logic here\n\n                // Check if this is the correct form\n                if (frm.doctype === doctype && frappe.get_route()[1] === doctype) {\n                    console.log(`Correct form loaded: ${doctype}`);\n                    // break; // Exit the loop\n                }\n                frm.add_custom_button(__(\"Connection Test\"), function() {\n                    console.log(`1 ${doctype}`);\n                });\n            },\n            onload_post_render(frm) {\n                if (!correctFormLoaded) {\n                    console.log(`Form loaded and rendered for ${doctype}`);\n                    // Add your onload_post_render logic here\n\n                    // Check if this is the correct form\n                    if (frm.doctype === doctype && frappe.get_route()[1] === doctype) {\n                        console.log(`Correct form loaded: ${doctype}`);\n                        correctFormLoaded = true; // Set the flag to true\n                        // break; // Exit the loop\n                    }\n                }\n            }\n        });\n\n        // Break out of the loop if the correct form is loaded\n        if (correctFormLoaded) {\n            break;\n        }\n    }\n});"],
  "mappings": ";;AAAA,SAAO,QAAQ,kBAAkB;AAqKjC,SAAO,QAAQ,EAAE,MAAM,WAAW;AAE9B,UAAM,WAAW,CAAC,iBAAiB,kBAAkB;AACrD,QAAI,oBAAoB;AAGxB,aAAS,IAAI,GAAG,IAAI,SAAS,QAAQ,KAAK;AACtC,YAAM,UAAU,SAAS;AAGzB,aAAO,GAAG,KAAK,GAAG,SAAS;AAAA,QACvB,QAAQ,KAAK;AACT,cAAI,CAAC,mBAAmB;AACpB,gCAAoB;AAAA,UACxB;AAEA,kBAAQ,IAAI,sBAAsB,SAAS;AAI3C,cAAI,IAAI,YAAY,WAAW,OAAO,UAAU,EAAE,OAAO,SAAS;AAC9D,oBAAQ,IAAI,wBAAwB,SAAS;AAAA,UAEjD;AACA,cAAI,kBAAkB,GAAG,iBAAiB,GAAG,WAAW;AACpD,oBAAQ,IAAI,KAAK,SAAS;AAAA,UAC9B,CAAC;AAAA,QACL;AAAA,QACA,mBAAmB,KAAK;AACpB,cAAI,CAAC,mBAAmB;AACpB,oBAAQ,IAAI,gCAAgC,SAAS;AAIrD,gBAAI,IAAI,YAAY,WAAW,OAAO,UAAU,EAAE,OAAO,SAAS;AAC9D,sBAAQ,IAAI,wBAAwB,SAAS;AAC7C,kCAAoB;AAAA,YAExB;AAAA,UACJ;AAAA,QACJ;AAAA,MACJ,CAAC;AAGD,UAAI,mBAAmB;AACnB;AAAA,MACJ;AAAA,IACJ;AAAA,EACJ,CAAC;",
  "names": []
}
